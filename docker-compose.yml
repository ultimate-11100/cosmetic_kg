version: '3.8'

services:
  # Neo4j 图数据库
  neo4j:
    image: neo4j:5.14
    container_name: cosmetic_kg_neo4j
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    environment:
      - NEO4J_AUTH=neo4j/password
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=2G
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - cosmetic_kg_network
    restart: unless-stopped

  # Redis 缓存数据库
  redis:
    image: redis:7-alpine
    container_name: cosmetic_kg_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cosmetic_kg_network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # MySQL 关系数据库（用于存储原始数据）
  mysql:
    image: mysql:8.0
    container_name: cosmetic_kg_mysql
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_DATABASE=cosmetic_data
      - MYSQL_USER=cosmetic_user
      - MYSQL_PASSWORD=password
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - cosmetic_kg_network
    restart: unless-stopped
    command: --default-authentication-plugin=mysql_native_password

  # API 服务
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: cosmetic_kg_api
    ports:
      - "8000:8000"
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MYSQL_URL=mysql://root:password@mysql:3306/cosmetic_data
    volumes:
      - ./config:/app/config
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - neo4j
      - redis
      - mysql
    networks:
      - cosmetic_kg_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 前端服务
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: cosmetic_kg_frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
    depends_on:
      - api
    networks:
      - cosmetic_kg_network
    restart: unless-stopped

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: cosmetic_kg_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - api
      - frontend
    networks:
      - cosmetic_kg_network
    restart: unless-stopped

  # 数据采集服务
  crawler:
    build:
      context: .
      dockerfile: Dockerfile.crawler
    container_name: cosmetic_kg_crawler
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=password
      - MYSQL_URL=mysql://root:password@mysql:3306/cosmetic_data
    volumes:
      - ./config:/app/config
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - neo4j
      - mysql
    networks:
      - cosmetic_kg_network
    restart: "no"  # 按需运行
    profiles:
      - crawler

  # 数据处理服务
  processor:
    build:
      context: .
      dockerfile: Dockerfile.processor
    container_name: cosmetic_kg_processor
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=password
      - MYSQL_URL=mysql://root:password@mysql:3306/cosmetic_data
    volumes:
      - ./config:/app/config
      - ./data:/app/data
      - ./models:/app/models
      - ./logs:/app/logs
    depends_on:
      - neo4j
      - mysql
    networks:
      - cosmetic_kg_network
    restart: "no"  # 按需运行
    profiles:
      - processor

volumes:
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local
  redis_data:
    driver: local
  mysql_data:
    driver: local

networks:
  cosmetic_kg_network:
    driver: bridge
